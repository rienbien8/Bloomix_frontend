"use client";

import { useEffect, useRef, useState } from "react";
import { Loader } from "@googlemaps/js-api-loader";
import { TbLocationFilled } from "react-icons/tb";

const API_BASE =
  process.env.NEXT_PUBLIC_API_BASE_URL || "http://127.0.0.1:8000";
const MAPS_KEY = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || "";

type Props = {
  height?: string; // ‰æã: "320px"
  rounded?: string; // ‰æã: "1rem"
  showSpecialToggle?: boolean;
  user_id?: number; // „É¶„Éº„Ç∂„ÉºIDÔºà„Éï„Ç©„É≠„ÉºÊé®„Åó„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Áî®Ôºâ
  followed_only?: number; // „Éï„Ç©„É≠„ÉºÊé®„Åó„ÅÆ„ÅøË°®Á§∫Ôºà0 or 1Ôºâ
  onCenterChange?: (
    center: { lat: number; lng: number },
    reason: "initial" | "search" | "move"
  ) => void;
  onBBoxChange?: (bbox: string) => void; // Âú∞Âõ≥„ÅÆË°®Á§∫ÁØÑÂõ≤ÔºàBBoxÔºâ„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
  onSpotsUpdate?: (spots: any[]) => void; // „Çπ„Éù„ÉÉ„ÉàÊõ¥Êñ∞ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
};

async function apiGet<T>(
  path: string,
  params?: Record<string, any>
): Promise<T> {
  const url = new URL(path, API_BASE);
  if (params) {
    Object.entries(params).forEach(
      ([k, v]) => v != null && url.searchParams.set(k, String(v))
    );
  }
  const res = await fetch(url.toString());
  if (!res.ok) throw new Error(`${res.status} ${await res.text()}`);
  return res.json();
}

function mapToBBox(map: google.maps.Map | null): string | null {
  if (!map) return null;
  const b = map.getBounds();
  if (!b) return null;
  const sw = b.getSouthWest();
  const ne = b.getNorthEast();
  return `${sw.lat()},${sw.lng()},${ne.lat()},${ne.lng()}`;
}

export default function MapEmbed({
  height = "320px",
  rounded = "1rem",
  showSpecialToggle = true,
  user_id,
  followed_only = 0,
  onCenterChange,
  onBBoxChange,
  onSpotsUpdate,
}: Props) {
  const wrapRef = useRef<HTMLDivElement | null>(null);
  const mapRef = useRef<google.maps.Map | null>(null);
  const infoRef = useRef<google.maps.InfoWindow | null>(null);
  const markersRef = useRef<google.maps.Marker[]>([]);
  const [mapsReady, setMapsReady] = useState(false);
  const [q, setQ] = useState("");
  const [status, setStatus] = useState("Ë™≠„ÅøËæº„Åø‰∏≠‚Ä¶");
  const [specialOnly, setSpecialOnly] = useState(false);
  const [showRefreshButton, setShowRefreshButton] = useState(false);

  // --- Google Maps Ë™≠„ÅøËæº„Åø ---
  useEffect(() => {
    let cancelled = false;
    if (!MAPS_KEY) {
      setStatus("Maps API„Ç≠„ÉºÊú™Ë®≠ÂÆö");
      return;
    }
    const loader = new Loader({
      apiKey: MAPS_KEY,
      version: "weekly",
      libraries: ["places", "geometry"],
    });
    loader
      .load()
      .then(() => {
        if (cancelled || !wrapRef.current) return;
        const google = (window as any).google as typeof window.google;
        mapRef.current = new google.maps.Map(wrapRef.current, {
          center: { lat: 35.659, lng: 139.7 }, // Ê∏ãË∞∑ËøëËæ∫
          zoom: 13, // ËªäÁßªÂãï„ÇíÂâçÊèê„Å®„Åó„Å¶ÈÅ©Â∫¶„Å™ÁØÑÂõ≤„ÇíË°®Á§∫
          mapTypeControl: false,
          streetViewControl: false,
          fullscreenControl: false,
        });
        infoRef.current = new google.maps.InfoWindow();
        setMapsReady(true);
        // ÂàùÊúü‰ΩçÁΩÆ„Çí„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅßÈÄöÁü•
        if (onCenterChange) {
          onCenterChange({ lat: 35.659, lng: 139.7 }, "initial");
        }
        // ÂàùÊúüBBox„ÇÇÈÄöÁü•
        if (onBBoxChange) {
          const bbox = mapToBBox(mapRef.current);
          if (bbox) {
            onBBoxChange(bbox);
          }
        }
      })
      .catch((e) => {
        console.error(e);
        setStatus("Google Maps„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      });
    return () => {
      cancelled = true;
    };
  }, []);

  // --- ÂàùÂõûÔºãÁßªÂãïÊôÇ„Éï„Çß„ÉÉ„ÉÅ ---
  useEffect(() => {
    if (!mapsReady || !mapRef.current) return;
    const google = (window as any).google as typeof window.google;
    let timer: any;

    const idleListener = mapRef.current.addListener("idle", () => {
      clearTimeout(timer);
      timer = setTimeout(() => {
        // Âú∞Âõ≥„Éâ„É©„ÉÉ„Ç∞ÊôÇ„ÅØËá™ÂãïÂèñÂæó„Åõ„Åö„ÄÅÂÜçÊ§úÁ¥¢„Éú„Çø„É≥„ÅÆ„ÅøË°®Á§∫
        setShowRefreshButton(true);
        // BBox„ÅÆÈÄöÁü•„ÅØÂÜçÊ§úÁ¥¢„Éú„Çø„É≥„ÇíÊäº„Åó„ÅüÊôÇ„ÅÆ„ÅøË°å„ÅÜ
      }, 350);
    });

    // ÂàùÊúüË°®Á§∫ÊôÇ„ÅØÁèæÂú®Âú∞ÂèñÂæó„Åõ„Åö„ÄÅÂàùÊúü‰ΩçÁΩÆÔºàÊ∏ãË∞∑Ôºâ„ÇíÁ∂≠ÊåÅ
    setTimeout(loadSpots, 400);

    return () => {
      if (idleListener) google.maps.event.removeListener(idleListener);
      markersRef.current.forEach((m) => m.setMap(null));
      markersRef.current = [];
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapsReady, specialOnly]);

  async function loadSpots() {
    try {
      if (!mapRef.current) return;
      const bbox = mapToBBox(mapRef.current);
      if (!bbox) return;
      const c = mapRef.current.getCenter();
      const origin = c ? `${c.lat()},${c.lng()}` : undefined;
      setStatus("Âë®Ëæ∫„Çπ„Éù„ÉÉ„ÉàÂèñÂæó‰∏≠‚Ä¶");

      const data = await apiGet<{ count: number; items: any[] }>(
        "/api/v1/spots",
        {
          bbox,
          origin,
          is_special: specialOnly ? 1 : undefined,
          user_id: followed_only ? user_id : undefined,
          followed_only: followed_only ? 1 : undefined,
          limit: 20,
        }
      );

      // „Éá„Éê„ÉÉ„Ç∞: API„É¨„Çπ„Éù„É≥„Çπ„ÇíÁ¢∫Ë™ç
      console.log("MapEmbed API„É¨„Çπ„Éù„É≥„Çπ:", data);
      console.log(
        "Home„Çπ„Éù„ÉÉ„Éà„Éá„Éº„Çø:",
        data.items.map((s) => ({
          id: s.id,
          name: s.name,
          is_special: s.is_special,
          type: typeof s.is_special,
          value: s.is_special,
        }))
      );

      // „Çπ„Éù„ÉÉ„ÉàÊõ¥Êñ∞„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÂëº„Å≥Âá∫„Åó
      if (onSpotsUpdate) {
        console.log(
          "üó∫Ô∏è MapEmbed: „Çπ„Éù„ÉÉ„ÉàÊõ¥Êñ∞„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÂëº„Å≥Âá∫„Åó",
          data.items.length,
          "‰ª∂"
        );
        onSpotsUpdate(data.items);
      } else {
        console.log(
          "üó∫Ô∏è MapEmbed: onSpotsUpdate„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
        );
      }

      // Êó¢Â≠ò„Éû„Éº„Ç´„ÉºÊéÉÈô§
      markersRef.current.forEach((m) => m.setMap(null));
      markersRef.current = [];

      const google = (window as any).google as typeof window.google;
      data.items.forEach((s) => {
        // is_special=1„ÅÆ„Çπ„Éù„ÉÉ„Éà„Å´„ÅØHondaLogo.svg„Çí‰ΩøÁî®
        let icon = undefined;
        console.log(`„Çπ„Éù„ÉÉ„Éà ${s.name} (ID: ${s.id}) „ÅÆis_specialÂà§ÂÆö:`, {
          value: s.is_special,
          type: typeof s.is_special,
          isEqualToOne: s.is_special === 1,
          isTruthy: Boolean(s.is_special),
        });

        if (Boolean(s.is_special)) {
          console.log(`‚úÖ ${s.name} „Å´HondaLogo.svg„ÇíË®≠ÂÆö`);
          icon = {
            url: "/HondaLogo.svg",
            scaledSize: new google.maps.Size(28, 28),
            anchor: new google.maps.Point(16, 16),
          };
        } else {
          console.log(
            `‚ùå ${s.name} „ÅØstar_logo.svgÔºàis_special: ${s.is_special}Ôºâ`
          );
          icon = {
            url: "/star_logo.svg",
            scaledSize: new google.maps.Size(32, 32),
            anchor: new google.maps.Point(16, 16),
          };
        }

        const marker = new google.maps.Marker({
          map: mapRef.current!,
          position: { lat: s.lat, lng: s.lng },
          title: s.name,
          icon: icon,
          zIndex: Boolean(s.is_special) ? 1000 : 1, // Special„É≠„Ç¥„ÇíÂâçÈù¢„Å´Ë°®Á§∫
        });
        marker.addListener("click", async () => {
          try {
            const [detail, contents, oshis] = await Promise.all([
              apiGet<any>(`/api/v1/spots/${s.id}`),
              apiGet<any>(`/api/v1/spots/${s.id}/contents`, {
                langs: "ja,en",
                max_duration: 20,
              }),
              apiGet<any>(`/api/v1/spots/${s.id}/oshis`),
            ]);

            const html = `
              <div style="max-width:280px">
                <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:6px">
                  <div style="font-weight:700;font-size:14px;color:#1a1a1a">${escapeHtml(
                    detail.name || ""
                  )}</div>
                  <button 
                    onclick="window.location.href='/drive?lat=${s.lat}&lng=${
              s.lng
            }&name=${encodeURIComponent(
              detail.name || ""
            )}&address=${encodeURIComponent(detail.address || "")}'"
                    style="background:#0068b7;color:white;border:none;border-radius:12px;padding:4px 8px;font-size:11px;cursor:pointer;white-space:nowrap"
                  >
                    „Åì„Åì„Å∏Ë°å„Åè
                  </button>
                </div>
                <div style="font-size:12px;color:#555;margin-bottom:6px">${escapeHtml(
                  detail.address || ""
                )}</div>
                ${
                  oshis.items && oshis.items.length > 0
                    ? `<div style="margin-bottom:6px">
                        ${oshis.items
                          .map(
                            (o: any) =>
                              `<span style="display:inline-block;background:#f0f0f0;color:#333;padding:2px 6px;margin:1px;border-radius:4px;font-size:11px">${escapeHtml(
                                o.name
                              )}</span>`
                          )
                          .join("")}
                      </div>`
                    : ""
                }
                ${
                  detail.description
                    ? `<div style="font-size:12px;color:#333;margin-bottom:6px;line-height:1.4">${escapeHtml(
                        detail.description || ""
                      )}</div>`
                    : ""
                }
              </div>`;
            infoRef.current!.setContent(html);
            infoRef.current!.open({ anchor: marker, map: mapRef.current! });
          } catch (error) {
            console.error("„Çπ„Éù„ÉÉ„ÉàË©≥Á¥∞ÂèñÂæó„Ç®„É©„Éº:", error);
            infoRef.current!.setContent(
              '<div style="font-size:12px;color:#c00">Ë©≥Á¥∞„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</div>'
            );
            infoRef.current!.open({ anchor: marker, map: mapRef.current! });
          }
        });
        markersRef.current.push(marker);
      });
      setStatus(`ÂèñÂæó: ${data.count}‰ª∂`);
    } catch (e: any) {
      console.error(e);
      setStatus(`ÂèñÂæóÂ§±Êïó: ${e.message || e}`);
    }
  }

  async function onSearch() {
    const text = q.trim();
    if (!text) return;
    try {
      const ac = await apiGet<{ predictions: any[] }>(
        "/bff/maps/autocomplete",
        { q: text, language: "ja" }
      );
      const first = ac.predictions?.[0];
      if (!first) {
        setStatus("ÂÄôË£ú„Å™„Åó");
        return;
      }
      const d = await apiGet<any>("/bff/maps/place-details", {
        place_id: first.place_id,
        language: "ja",
      });

      const lat =
        d?.result?.geometry?.location?.lat ??
        d?.location?.latitude ??
        d?.location?.lat ??
        d?.lat;
      const lng =
        d?.result?.geometry?.location?.lng ??
        d?.location?.longitude ??
        d?.location?.lng ??
        d?.lng;

      if (
        typeof lat === "number" &&
        typeof lng === "number" &&
        mapRef.current
      ) {
        mapRef.current.setCenter({ lat, lng });
        mapRef.current.setZoom(13); // ËªäÁßªÂãï„ÇíÂâçÊèê„Å®„Åó„Å¶ÈÅ©Â∫¶„Å™ÁØÑÂõ≤„ÇíË°®Á§∫
        // Ê§úÁ¥¢Âæå„Å´„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÂëº„Å≥Âá∫„Åó
        if (onCenterChange) {
          onCenterChange({ lat, lng }, "search");
        }
        // Ê§úÁ¥¢Âæå„Å´BBox„ÇíÈÄöÁü•
        if (onBBoxChange) {
          const bbox = mapToBBox(mapRef.current);
          if (bbox) {
            onBBoxChange(bbox);
          }
        }
        // Ê§úÁ¥¢Âæå„ÅØÂÜçÊ§úÁ¥¢„Éú„Çø„É≥„ÇíÈùûË°®Á§∫
        setShowRefreshButton(false);

        // Ê§úÁ¥¢Âæå„Å´„Çπ„Éù„ÉÉ„Éà„ÇíË™≠„ÅøËæº„Åø
        await loadSpots();
      }
    } catch (e) {
      console.error(e);
    }
  }

  // ÂÜçÊ§úÁ¥¢„Éú„Çø„É≥„ÇíÊäº„Åó„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
  async function onRefreshArea() {
    if (!mapRef.current) return;
    setShowRefreshButton(false);
    setStatus("„Åì„ÅÆ„Ç®„É™„Ç¢„ÅßÂÜçÊ§úÁ¥¢‰∏≠‚Ä¶");

    // ÂÜçÊ§úÁ¥¢ÊôÇ„Å´BBox„ÇíÈÄöÁü•
    if (onBBoxChange) {
      const bbox = mapToBBox(mapRef.current);
      if (bbox) {
        onBBoxChange(bbox);
      }
    }

    // ÂÜçÊ§úÁ¥¢ÊôÇ„Å´‰∏≠ÂøÉ‰ΩçÁΩÆ„ÇÇÈÄöÁü•Ôºàreason: "search"„Å®„Åó„Å¶Ôºâ
    if (onCenterChange) {
      const center = mapRef.current.getCenter();
      if (center) {
        onCenterChange({ lat: center.lat(), lng: center.lng() }, "search");
      }
    }

    await loadSpots();
  }

  // ---- „Åì„Åì„Åã„Çâ: Ê§úÁ¥¢UI„Çí„ÄåÂ§ñÂá∫„Åó„Äç ----
  const Controls = (
    <div
      className="w-full mb-2"
      style={{
        background: "#fff",
        padding: 10,
        borderRadius: 10,
        boxShadow: "0 2px 12px rgba(0,0,0,.15)",
      }}
    >
      <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
        <input
          value={q}
          onChange={(e) => setQ(e.target.value)}
          placeholder="Âú∞Âêç„ÅßÊ§úÁ¥¢Ôºà‰æã: Ê∏ãË∞∑ÈßÖÔºâ"
          style={{
            width: "100%",
            padding: "8px 10px",
            borderRadius: 8,
            border: "1px solid #ddd",
            flex: 1,
            minWidth: 0,
          }}
        />
        <button
          onClick={onSearch}
          style={{
            padding: "8px 10px",
            borderRadius: 8,
            border: "1px solid #ccc",
            background: "#f7f7f7",
          }}
        >
          Ê§úÁ¥¢
        </button>
      </div>

      {/* {showSpecialToggle && (
        <label style={{ display: "flex", alignItems: "center", gap: 6, marginTop: 8, fontSize: 13 }}>
          <input
            type="checkbox"
            checked={specialOnly}
            onChange={(e) => setSpecialOnly(e.target.checked)}
          />
          ÁâπÊÆä„Çπ„Éù„ÉÉ„Éà„ÅÆ„Åø
        </label>
      )} */}
    </div>
  );

  return (
    <div
      className="w-full"
      style={{ borderRadius: rounded, overflow: "hidden" }}
    >
      {/* Â§ñÂá∫„Åó„Ç≥„É≥„Éà„É≠„Éº„É´ */}
      {Controls}

      {/* Âú∞Âõ≥„Ç´„Éº„ÉâÊú¨‰ΩìÔºàÊ§úÁ¥¢UI„ÅØÈáç„Å≠„Å™„ÅÑÔºâ */}
      <div
        className="relative w-full shadow-card"
        style={{
          height,
          borderRadius: rounded,
          overflow: "hidden",
          background: "#e5e7eb",
        }}
      >
        <div ref={wrapRef} className="absolute inset-0" />

        {/* ÂÜçÊ§úÁ¥¢„Éú„Çø„É≥ */}
        {showRefreshButton && (
          <div
            className="absolute z-30"
            style={{
              top: 10,
              left: "50%",
              transform: "translateX(-50%)",
            }}
          >
            <button
              onClick={onRefreshArea}
              style={{
                background: "rgba(255,255,255,0.95)",
                border: "1px solid #ddd",
                borderRadius: "20px",
                padding: "8px 16px",
                fontSize: "12px",
                fontWeight: "500",
                color: "#333",
                boxShadow: "0 2px 8px rgba(0,0,0,0.15)",
                display: "flex",
                alignItems: "center",
                gap: "6px",
                cursor: "pointer",
              }}
            >
              <svg
                width="14"
                height="14"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
              >
                <path d="M21 2v6h-6" />
                <path d="M3 12a9 9 0 0 1 15-6.7L21 8" />
              </svg>
              „Åì„ÅÆ„Ç®„É™„Ç¢„ÅßÂÜçÊ§úÁ¥¢
            </button>
          </div>
        )}

        {/* „Çπ„ÉÜ„Éº„Çø„Çπ */}
        <div
          className="absolute z-30"
          style={{
            bottom: 10,
            left: 10,
            background: "rgba(255,255,255,.95)",
            padding: 8,
            borderRadius: 8,
            fontSize: 12,
          }}
        >
          {status}
        </div>

        {/* ÁèæÂú®Âú∞„Éú„Çø„É≥ÔºàÂè≥‰∏ãÔºâ */}
        <div
          className="absolute z-30"
          style={{
            bottom: 70,
            right: 10,
          }}
        >
          <button
            onClick={() => {
              if (!navigator.geolocation || !mapRef.current) return;
              navigator.geolocation.getCurrentPosition(
                (pos) => {
                  const lat = pos.coords.latitude;
                  const lng = pos.coords.longitude;
                  const position = { lat, lng };

                  // Âú∞Âõ≥„ÅÆ‰∏≠ÂøÉ„ÇíÁèæÂú®Âú∞„Å´ÁßªÂãï
                  mapRef.current!.setCenter(position);
                  mapRef.current!.setZoom(13);

                  // ÁèæÂú®Âú∞Â§âÊõ¥„Çí„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅßÈÄöÁü•
                  if (onCenterChange) {
                    onCenterChange(position, "move");
                  }

                  // ÁèæÂú®Âú∞Âë®Ëæ∫„ÅÆBBox„ÇíÈÄöÁü•
                  if (onBBoxChange) {
                    const bbox = mapToBBox(mapRef.current);
                    if (bbox) {
                      onBBoxChange(bbox);
                    }
                  }

                  // ÁèæÂú®Âú∞ÁßªÂãïÂæå„ÅØÂÜçÊ§úÁ¥¢„Éú„Çø„É≥„ÇíÈùûË°®Á§∫
                  setShowRefreshButton(false);
                },
                () => setStatus("ÁèæÂú®Âú∞„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü"),
                { enableHighAccuracy: true, timeout: 5000 }
              );
            }}
            style={{
              width: "40px",
              height: "40px",
              background: "rgba(255, 255, 255, 0.95)",
              border: "1px solid #ddd",
              borderRadius: "50%",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              cursor: "pointer",
              boxShadow: "0 2px 8px rgba(4, 131, 250, 0.15)",
            }}
            title="ÁèæÂú®Âú∞„Å∏ÁßªÂãï"
          >
            <TbLocationFilled size={18} color="#4285F4" />
          </button>
        </div>
      </div>
    </div>
  );
}

function escapeHtml(s: any) {
  return String(s).replace(
    /[&<>"']/g,
    (m) =>
      ((
        {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;",
        } as any
      )[m])
  );
}
